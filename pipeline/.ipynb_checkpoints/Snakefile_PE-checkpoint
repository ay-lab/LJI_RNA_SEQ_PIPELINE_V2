import pandas as pd
from glob import glob
import sys

conf_dir = "conf_RNA_Seq.json"

# Read in config

configfile: conf_dir

ref_dir = config['config']['ref_dir']
gtf_dir = config['config']['gtf_dir']
run_file = config['config']['run_file']
run_ID = config['config']['run_ID']

fastp_app = config['app']['fastp']
STAR_app = config['app']['STAR']
samtools_app = config['app']['samtools']
bamCoverage_app = config['app']['bamCoverage']
qualimap_app = config['app']['qualimap']

try:
    dict_samples = pd.read_csv(run_file,index_col = 0)[run_ID].to_dict()
except KeyError:
    sys.exit('Run does not exist in run sample file!')
except FileNotFoundError:
    sys.exit('sample run file does not exist!')
    

rule all:
    input:
        expand("3.QC_files/fastp_report/{sample}_fastp.html",sample = list(dict_samples.keys())),
        expand("3.QC_files/qualimap_bamqc/{sample}/qualimapReport.html",sample = list(dict_samples.keys())),
        expand("3.QC_files/qualimap/{sample}/qualimapReport.html",sample = list(dict_samples.keys())),
        expand("3.QC_files/bed_wiggle/{sample}.bw",sample = list(dict_samples.keys())),
        "4.Output/counts/TPM_counts.csv",
        "4.Output/counts/raw_counts_unfiltered.csv",
        "4.Output/counts/raw_counts.csv",
        "4.Output/QC_report.csv",
        "4.Output/QC_plots/Spearman_correlation.png",
        "4.Output/QC_plots/STAR_minimal_counts_soft_threshold.png",
        "4.Output/QC_plots/PCA_QC_correlation.png",
        "4.Output/check_QC_PCA.html",
        "4.Output/QC_report.html",
        "logs/job_finished.txt"

rule fastq_filter:
    input:
        fastq_f = "2.Internal_files/fastq_input/{sample}_R1.fastq.gz",
        fastq_r = "2.Internal_files/fastq_input/{sample}_R2.fastq.gz"
    output:
        fastq_f = "2.Internal_files/fastq_filtered/{sample}_R1.fastq.gz",
        fastq_r = "2.Internal_files/fastq_filtered/{sample}_R2.fastq.gz",
        json = "2.Internal_files/fastp_output/{sample}_fastp.json",
        report = "3.QC_files/fastp_report/{sample}_fastp.html"
    threads: 4
    shell:
        "{fastp_app} -w {threads} -i {input.fastq_f} -I {input.fastq_r} "
        "-o {output.fastq_f} -O {output.fastq_r} -j {output.json} -h {output.report}"

rule star_mapping:
    input:
        fastq_f = "2.Internal_files/fastq_filtered/{sample}_R1.fastq.gz",
        fastq_r = "2.Internal_files/fastq_filtered/{sample}_R2.fastq.gz"
    params:
        out_dir = "2.Internal_files/bam_aligned/{sample}",
        out_prefix = "2.Internal_files/bam_aligned/{sample}/{sample}_"    
    output:
        "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam",
        "2.Internal_files/bam_aligned/{sample}/{sample}_ReadsPerGene.out.tab"
    threads: 4
    shell:
        "mkdir -p {params.out_dir} && {STAR_app} --runThreadN {threads} --genomeDir {ref_dir} --sjdbGTFfile {gtf_dir} --readFilesCommand zcat "
        "--outSAMtype BAM SortedByCoordinate --quantMode GeneCounts "
        "--readFilesIn {input.fastq_f} {input.fastq_r} "
        "--outFileNamePrefix {params.out_prefix}"


rule bam_index:
    input:
        bam = "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam"
    output:
        "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam.bai"
    shell:
        "{samtools_app} index {input.bam}"


rule bamCoverage:
    input:
        "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam.bai"
    params:
        bam = "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam"
    output:
        bed = "3.QC_files/bed_wiggle/{sample}.bw"
    threads: 4
    shell:
        "{bamCoverage_app} -p {threads} -b {params.bam} -o {output.bed}"
        
rule bam_qc:
    input:
        "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam.bai"           
    params:
        out_dir = "3.QC_files/qualimap_bamqc/{sample}",
        bam = "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam"
    output:
        "3.QC_files/qualimap_bamqc/{sample}/genome_results.txt",
        qc_dir = "3.QC_files/qualimap_bamqc/{sample}/qualimapReport.html"
    threads: 4
    shell:
        "mkdir -p {params.out_dir} && "
        "{qualimap_app} bamqc -nt {threads} --java-mem-size=30G --skip-duplicated "
        "-bam {params.bam}  -outdir {params.out_dir}"

rule rnaseq_qc:
    input:
        "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam.bai" 
    params:
        bam = "2.Internal_files/bam_aligned/{sample}/{sample}_Aligned.sortedByCoord.out.bam",
        gtf_dir = config['config']['gtf_dir'],
        out_dir = "3.QC_files/qualimap/{sample}"
    output:
        "3.QC_files/qualimap/{sample}/rnaseq_qc_results.txt",
        qc_dir = "3.QC_files/qualimap/{sample}/qualimapReport.html"
    shell:
        "mkdir -p {params.out_dir} && {qualimap_app} rnaseq -pe --java-mem-size=30G "
        "-bam {params.bam} -gtf {params.gtf_dir} -outdir {params.out_dir}"
        
rule merge_counts:
    input:
        expand("2.Internal_files/bam_aligned/{sample}/{sample}_ReadsPerGene.out.tab",sample = list(dict_samples.keys()))
    params:
        conf_dir,
        list(dict_samples.keys())
    output:
        '4.Output/counts/TPM_counts.csv',
        '4.Output/counts/raw_counts_unfiltered.csv',
        '4.Output/counts/raw_counts.csv'
    script:
        "scripts/merge_counts.py"

rule make_report:
    input:
        expand('3.QC_files/qualimap_bamqc/{sample}/genome_results.txt',sample = list(dict_samples.keys())),
        expand('3.QC_files/qualimap/{sample}/rnaseq_qc_results.txt',sample = list(dict_samples.keys())),
        '4.Output/counts/TPM_counts.csv',
        '4.Output/counts/raw_counts_unfiltered.csv',
        '4.Output/counts/raw_counts.csv'
    params:
        conf_dir,
        list(dict_samples.keys())
    output:
        '4.Output/QC_report.html',
        '4.Output/QC_report.csv'
    script:
        "scripts/make_report.py"
        
rule make_plots:
    input:
        '4.Output/QC_report.csv'
    params:
        conf_dir,
        list(dict_samples.keys())
    output:
        '4.Output/QC_plots/Spearman_correlation.png',
        '4.Output/QC_plots/STAR_minimal_counts_soft_threshold.png'
    script:
        "scripts/make_plots.py"
        
rule make_PCA_plots:
    input:
        '4.Output/QC_report.csv',
        '4.Output/counts/TPM_counts.csv'
    params:
        conf_dir
    output:
        '4.Output/QC_plots/PCA_QC_correlation.png',
        '4.Output/check_QC_PCA.html'
    script:
        "scripts/make_PCA.py"
        
rule save_history:
    input:
        '4.Output/QC_report.csv',
        '4.Output/QC_plots/Spearman_correlation.png',
        '4.Output/QC_plots/STAR_minimal_counts_soft_threshold.png',
        '4.Output/QC_plots/PCA_QC_correlation.png',
        '4.Output/QC_report.html'
    output:
        'logs/job_finished.txt'
    shell:
        "mkdir -p 4.Output/QC_report_history/{run_ID} && "
        "cp 4.Output/QC_report.csv 4.Output/QC_report_history/{run_ID}/QC_report.csv && "
        "cp -r 4.Output/QC_plots/ 4.Output/QC_report_history/{run_ID}/ &&"
        "cp 4.Output/check_QC_PCA.html 4.Output/QC_report_history/{run_ID}/ && "
        "touch logs/job_finished.txt && rm -r scripts"